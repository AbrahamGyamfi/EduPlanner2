import React, { useState } from 'react';

const QuizResults = ({ quiz, userAnswers, onReset, courseId, courseName, filename }) => {
  const [showCopyMessage, setShowCopyMessage] = useState(false);
  const [showSaveMessage, setShowSaveMessage] = useState(false);
  if (!quiz || !userAnswers.length) return null;

  const calculateScore = () => {
    // Check if this is a theory quiz
    const isTheoryQuiz = quiz.questions.some(q => q.type === 'theory');
    
    if (isTheoryQuiz) {
      // For theory quizzes, we consider completion as 100%
      return 100;
    }
    
    let correct = 0;
    quiz.questions.forEach((question, index) => {
      if (userAnswers[index] === question.correct_answer) {
        correct++;
      }
    });
    return Math.round((correct / quiz.questions.length) * 100);
  };

  const score = calculateScore();
  const isTheoryQuiz = quiz.questions.some(q => q.type === 'theory');
  const correctCount = isTheoryQuiz ? quiz.questions.length : userAnswers.filter((answer, index) => 
    answer === quiz.questions[index].correct_answer
  ).length;

  const getScoreColor = () => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBgColor = () => {
    if (score >= 80) return 'bg-green-100';
    if (score >= 60) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  const generateQuizReport = () => {
    const timestamp = new Date().toLocaleString();
    const performanceRating = score >= 80 ? 'Excellent' : score >= 60 ? 'Good' : 'Needs Improvement';
    
    let report = `üéØ QUIZ RESULTS REPORT\n`;
    report += `=====================================\n\n`;
    report += `üìö Course: ${courseName || 'General'}\n`;
    report += `üìÑ From File: ${filename || 'N/A'}\n`;
    report += `üéØ Quiz Title: ${quiz.title || 'Quiz'}\n`;
    report += `üìÖ Completed: ${timestamp}\n`;
    report += `üèÜ Final Score: ${score}% (${correctCount}/${quiz.questions.length} correct)\n`;
    report += `‚≠ê Performance: ${performanceRating}\n`;
    report += `üß† Quiz Type: ${isTheoryQuiz ? 'Theory' : 'Multiple Choice'}\n\n`;
    
    report += `üìã DETAILED BREAKDOWN\n`;
    report += `=====================================\n\n`;
    
    quiz.questions.forEach((question, index) => {
      report += `Question ${index + 1}:\n`;
      report += `${question.question}\n\n`;
      
      if (question.type === 'theory') {
        report += `Your Answer:\n${userAnswers[index] || 'Not answered'}\n\n`;
        report += `Guidelines:\n${question.answer_guidelines}\n\n`;
        report += `Status: ‚úÖ Submitted\n`;
      } else {
        report += `Your Answer: ${userAnswers[index] || 'Not answered'}\n`;
        report += `Correct Answer: ${question.correct_answer}\n`;
        const isCorrect = userAnswers[index] === question.correct_answer;
        report += `Result: ${isCorrect ? '‚úÖ Correct' : '‚ùå Incorrect'}\n`;
      }
      report += `\n---\n\n`;
    });
    
    report += `üìä SUMMARY STATISTICS\n`;
    report += `=====================================\n`;
    report += `Total Questions: ${quiz.questions.length}\n`;
    report += `Correct Answers: ${correctCount}\n`;
    report += `Accuracy Rate: ${score}%\n`;
    
    if (score >= 80) {
      report += `\nüåü Outstanding performance! Keep up the excellent work!`;
    } else if (score >= 60) {
      report += `\nüëç Good job! You're on the right track.`;
    } else {
      report += `\nüìö Consider reviewing the material and trying again.`;
    }
    
    report += `\n\n Generated by EduMaster AI Study Platform`;
    
    return report;
  };

  const handleCopyQuiz = async () => {
    try {
      const quizReport = generateQuizReport();
      await navigator.clipboard.writeText(quizReport);
      setShowCopyMessage(true);
      setTimeout(() => setShowCopyMessage(false), 3000);
    } catch (err) {
      console.error('Failed to copy quiz results:', err);
    }
  };

  const handleSaveQuiz = async () => {
    try {
      const quizReport = generateQuizReport();
      const quizData = {
        id: `quiz_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        title: `${quiz.title || 'Quiz'} Results - ${score}%`,
        content: quizReport,
        courseId: courseId,
        courseName: courseName,
        filename: filename,
        score: score,
        totalQuestions: quiz.questions.length,
        correctAnswers: correctCount,
        quizType: isTheoryQuiz ? 'theory' : 'mcq',
        created_at: new Date().toISOString(),
        type: 'quiz_result'
      };
      
      // Save to localStorage
      const existingQuizzes = JSON.parse(localStorage.getItem('saved_quizzes')) || [];
      localStorage.setItem('saved_quizzes', JSON.stringify([quizData, ...existingQuizzes]));
      
      // Also save to course-specific storage for easy access
      if (courseId) {
        const courseQuizzes = JSON.parse(localStorage.getItem('course_quiz_results')) || {};
        if (!courseQuizzes[courseId]) {
          courseQuizzes[courseId] = [];
        }
        courseQuizzes[courseId].unshift(quizData);
        localStorage.setItem('course_quiz_results', JSON.stringify(courseQuizzes));
      }
      
      setShowSaveMessage(true);
      setTimeout(() => setShowSaveMessage(false), 3000);
    } catch (err) {
      console.error('Failed to save quiz results:', err);
    }
  };


  return (
    <div className="px-4 mt-6 flex justify-center">
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-4xl">
        <div className="flex items-center mb-6">
          <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mr-4">
            <span className="text-2xl">üéØ</span>
          </div>
          <h2 className="text-2xl font-bold text-green-700">Quiz Results</h2>
        </div>
        
        <div className={`${getScoreBgColor()} rounded-lg p-6 mb-6 text-center`}>
          <div className={`text-4xl font-bold ${getScoreColor()} mb-2`}>
            {score}%
          </div>
          <div className="text-lg text-gray-700">
            {isTheoryQuiz ? 
              `You completed all ${quiz.questions.length} theory questions` :
              `You answered ${correctCount} out of ${quiz.questions.length} questions correctly`
            }
          </div>
          {score >= 80 && (
            <div className="mt-2 text-green-600 font-semibold">
              üåü Excellent work!
            </div>
          )}
          {score >= 60 && score < 80 && (
            <div className="mt-2 text-yellow-600 font-semibold">
              üëç Good job!
            </div>
          )}
          {score < 60 && (
            <div className="mt-2 text-red-600 font-semibold">
              üìö Keep studying!
            </div>
          )}
        </div>
        
        <div className="space-y-4 mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Detailed Results</h3>
          {quiz.questions.map((question, index) => (
            <div key={index} className="bg-gray-50 rounded-lg p-4 border-l-4 border-gray-300">
              <h4 className="font-semibold text-gray-800 mb-3">
                Question {index + 1}: {question.question}
              </h4>
              
              {question.type === 'theory' ? (
                <div className="space-y-4">
                  <div className="bg-blue-50 rounded-lg p-3">
                    <div className="text-sm text-blue-600 font-medium mb-1">Your Answer:</div>
                    <div className="text-blue-800 whitespace-pre-wrap">{userAnswers[index] || 'Not answered'}</div>
                  </div>
                  
                  <div className="bg-yellow-50 rounded-lg p-3">
                    <div className="text-sm text-yellow-600 font-medium mb-1">Answer Guidelines:</div>
                    <div className="text-yellow-800">{question.answer_guidelines}</div>
                  </div>
                  
                  <div className="mt-3 flex items-center text-blue-600">
                    <span className="mr-2">‚úÖ</span>
                    <span className="font-medium">Answer Submitted</span>
                  </div>
                </div>
              ) : (
                <div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-blue-50 rounded-lg p-3">
                      <div className="text-sm text-blue-600 font-medium mb-1">Your Answer:</div>
                      <div className="text-blue-800">{userAnswers[index] || 'Not answered'}</div>
                    </div>
                    
                    <div className="bg-green-50 rounded-lg p-3">
                      <div className="text-sm text-green-600 font-medium mb-1">Correct Answer:</div>
                      <div className="text-green-800">{question.correct_answer}</div>
                    </div>
                  </div>
                  
                  <div className={`mt-3 flex items-center ${
                    userAnswers[index] === question.correct_answer ? 'text-green-600' : 'text-red-600'
                  }`}>
                    <span className="mr-2">
                      {userAnswers[index] === question.correct_answer ? '‚úÖ' : '‚ùå'}
                    </span>
                    <span className="font-medium">
                      {userAnswers[index] === question.correct_answer ? 'Correct' : 'Incorrect'}
                    </span>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
        
        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 items-center justify-center mb-6">
          <button
            onClick={handleSaveQuiz}
            className="flex items-center gap-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold px-6 py-3 rounded-lg shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
            </svg>
            üíæ Save Quiz Results
          </button>
          
          <button
            onClick={handleCopyQuiz}
            className="flex items-center gap-2 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold px-6 py-3 rounded-lg shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            üìã Copy to Clipboard
          </button>
        </div>
        
        {/* Success Messages */}
        {showSaveMessage && (
          <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg text-center">
            <div className="flex items-center justify-center gap-2 text-blue-700">
              <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <span className="font-medium">Quiz results saved successfully! üéâ</span>
            </div>
            <p className="text-sm text-blue-600 mt-1">
              You can find your saved quiz results in your course activities.
            </p>
          </div>
        )}
        
        {showCopyMessage && (
          <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg text-center">
            <div className="flex items-center justify-center gap-2 text-green-700">
              <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <span className="font-medium">Quiz results copied to clipboard! üìã</span>
            </div>
            <p className="text-sm text-green-600 mt-1">
              You can now paste it anywhere you'd like to share or save it.
            </p>
          </div>
        )}
        
        <div className="text-center">
          <button 
            onClick={onReset} 
            className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold px-8 py-3 rounded-lg shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            üîÑ Retake Quiz
          </button>
        </div>
      </div>
    </div>
  );
};

export default QuizResults;
